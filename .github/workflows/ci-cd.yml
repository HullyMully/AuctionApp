name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/kutalev-auction

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: auction_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run unit tests
      run: ./gradlew test
      
    - name: Run integration tests
      run: ./gradlew integrationTest
      
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/tests/
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: build/reports/jacoco/

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Compose
      uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '1.29.2'

    - name: Start services
      run: |
        docker-compose down --volumes --remove-orphans || true
        docker-compose up --build -d

    - name: Wait for services to be ready
      timeout-minutes: 5
      run: |
        echo "Waiting for app service..."
        for i in $(seq 1 60); do
          curl -s http://localhost:8081/actuator/health > /dev/null && break
          echo "Waiting... $i"
          sleep 5
        done
        
        echo "Waiting for Keycloak service..."
        for i in $(seq 1 60); do
          curl -s http://localhost:8080/realms/auction > /dev/null && break
          echo "Waiting... $i"
          sleep 5
        done

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Newman
      run: npm install -g newman

    - name: Run API tests
      run: newman run api-tests/collection.postman_collection.json --reporters cli,junit --reporter-junit-export results.xml
      
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: results.xml

    - name: Stop services
      if: always()
      run: docker-compose down

  monitoring-demo:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Compose
      uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '1.29.2'

    - name: Start monitoring infrastructure
      run: |
        docker-compose up --build -d

    - name: Wait for services
      run: |
        sleep 30
        curl -s http://localhost:8081/actuator/health
        curl -s http://localhost:3000/api/health
        curl -s http://localhost:9090/-/healthy

    - name: Generate load for metrics
      run: |
        for i in {1..10}; do
          curl -s http://localhost:8081/actuator/health
          curl -s http://localhost:8081/actuator/prometheus
          sleep 2
        done

    - name: Check monitoring endpoints
      run: |
        echo "Monitoring infrastructure is running:"
        echo "- Grafana: http://localhost:3000"
        echo "- Prometheus: http://localhost:9090"
        echo "- Loki: http://localhost:3100"
        echo "- Application: http://localhost:8081"

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Здесь можно добавить команды для деплоя
        # Например, kubectl apply или docker-compose на сервере 